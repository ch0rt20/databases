/******************************************************************************/
/***         Generated by IBExpert 2021.3.29.1 25.05.2022 14:34:35          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES CYRL;

CREATE DATABASE 'C:\Users\Устюжанин Вадим\Desktop\4 семак\Базы Данных\Лабораторная №3\zavod.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET CYRL;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_DETAIL;
SET GENERATOR GEN_DETAIL TO 8;

CREATE GENERATOR GEN_MACHINE;
SET GENERATOR GEN_MACHINE TO 8;

CREATE GENERATOR GEN_MODIFICATION;
SET GENERATOR GEN_MODIFICATION TO 0;

CREATE GENERATOR GEN_WORKSHOP;
SET GENERATOR GEN_WORKSHOP TO 12;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION EX_DETAIL_EXIST 'Такая деталь уже существует';

CREATE EXCEPTION EX_DETAIL_NOT_NULL 'Нельзя удалить деталь при наличии у нее модификаций';

CREATE EXCEPTION EX_MACHINE_EXIST 'Такой станок уже существует';

CREATE EXCEPTION EX_MACHINE_NOT_NULL 'Нельзя удалить станок при наличии у него деталей';

CREATE EXCEPTION EX_MODIFICATION_EXIST 'Такая модификация уже существует';

CREATE EXCEPTION EX_WORKSHOP_EXIST 'Такой цех уже существует';

CREATE EXCEPTION EX_WORKSHOP_NOT_NULL 'Нельзя удалить цех  при наличии у него станков';



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE DEL_DETAIL (
    PNUM_DETAIL INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEL_MACHINE (
    PNUM_MACHINE INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEL_MODIFICATION (
    PNUM_MODIFICATION INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DEL_WORKSHOPS (
    PNUM_WORKSHOP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INS_DETAILS (
    PNUM_MACHINE INTEGER,
    PNAMEDETAIL VARCHAR(20))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INS_MACHINE (
    PNUM_WORKSHOP INTEGER,
    PNAMEMACHINE VARCHAR(20),
    PTIMEOFMACHINE INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INS_MODIFICATIONS (
    PNUM_DETAIL INTEGER,
    PNAMEMODIFICATION VARCHAR(20),
    PWORKTIME INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INS_WORKSHOPS (
    PNAMEWORKSHOP VARCHAR(10),
    PCHIEFNAME VARCHAR(20))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SORT_BY_MACHINE_2 (
    TNUM_WORKSH INTEGER,
    TNUM_MACH INTEGER)
RETURNS (
    NAMEOFDETAIL VARCHAR(20),
    NUMBEROFMACHINE INTEGER,
    NUMBEROFWORKSHOP INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SORT_BY_MAX_WORK_5 (
    TNUM_MOD INTEGER)
RETURNS (
    MAXTIME INTEGER,
    MACHINENUM INTEGER,
    MACHINENAME VARCHAR(40))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SORT_BY_MIN_WORK_1 (
    TNUM_WORKSH INTEGER)
RETURNS (
    DETAILNAME VARCHAR(20),
    MODIFIFCATIONNAME VARCHAR(20),
    MINWORKTIME INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SORT_BY_NULL_MODIF_4 (
    TWORKSHOP_NUM INTEGER)
RETURNS (
    DETAILNAME VARCHAR(40),
    DETAILNUM INTEGER,
    WORKSHOPNUM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SORT_BY_RANDOM_NUM_3 (
    TNUM_WORKSH INTEGER,
    BOTTOM_LVL INTEGER,
    TOP_LVL INTEGER)
RETURNS (
    MODIFICATIONNAME VARCHAR(40),
    MODIFICATIONNUM INTEGER,
    WORKSHOPNUM INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPD_DETAILS (
    PNUM_DETAIL INTEGER,
    PNUM_MACHINE INTEGER,
    PNAMEDETAIL VARCHAR(20))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPD_MACHINE (
    PNUM_MACHINE INTEGER,
    PNUM_WORKSHOP INTEGER,
    PNAMEMACHINE VARCHAR(20),
    PTIMEOFMACHINE INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPD_MODIFICATIONS (
    PNUM_MODIFICATION INTEGER,
    PNUM_DETAIL INTEGER,
    PNAMEMODIFICATION VARCHAR(20),
    PWORKTIME INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPD_WORKSHOPS (
    PNUM_WORKSHOP INTEGER,
    PNAMEWORKSHOP VARCHAR(10),
    PCHIEFNAME VARCHAR(20))
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE DETAIL (
    NUM_DETAIL   INTEGER NOT NULL,
    NUM_MACHINE  INTEGER,
    NAMEDETAIL   VARCHAR(20) NOT NULL
);

CREATE TABLE MACHINE (
    NUM_MACHINE    INTEGER NOT NULL,
    NUM_WORKSHOP   INTEGER,
    NAMEMACHINE    VARCHAR(10) NOT NULL,
    TIMEOFMACHINE  INTEGER NOT NULL
);

CREATE TABLE MODIFICATION (
    NUM_MODIFICATION  INTEGER NOT NULL,
    NUM_DETAIL        INTEGER,
    NAMEMODIFICATION  VARCHAR(20) NOT NULL,
    WORKTIME          INTEGER NOT NULL
);

CREATE TABLE WORKSHOP (
    NUM_WORKSHOP  INTEGER NOT NULL,
    NAMEWORKSHOP  VARCHAR(10) NOT NULL,
    CHIEFNAME     VARCHAR(20) NOT NULL
);



/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: DOCUMENT_NUM1 */
CREATE VIEW DOCUMENT_NUM1(
    NAMEDETAIL,
    NAMEMODIFICATION,
    WORKTIME)
AS
select Det.namedetail, Mod.namemodification, Mod.worktime
from Modification Mod, Detail Det
where Det.num_detail = Mod.num_detail
;




/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE DETAIL ADD PRIMARY KEY (NUM_DETAIL);
ALTER TABLE MACHINE ADD PRIMARY KEY (NUM_MACHINE);
ALTER TABLE MODIFICATION ADD PRIMARY KEY (NUM_MODIFICATION);
ALTER TABLE WORKSHOP ADD PRIMARY KEY (NUM_WORKSHOP);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE DETAIL ADD FOREIGN KEY (NUM_MACHINE) REFERENCES MACHINE (NUM_MACHINE) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE MACHINE ADD FOREIGN KEY (NUM_WORKSHOP) REFERENCES WORKSHOP (NUM_WORKSHOP) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE MODIFICATION ADD FOREIGN KEY (NUM_DETAIL) REFERENCES DETAIL (NUM_DETAIL) ON DELETE NO ACTION ON UPDATE CASCADE;


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX INDDETAIL ON DETAIL (NUM_MACHINE);
CREATE UNIQUE INDEX UNINDDETAIL ON DETAIL (NUM_DETAIL);
CREATE INDEX INDMACHINE ON MACHINE (NUM_WORKSHOP);
CREATE UNIQUE INDEX UNINDMACHINE ON MACHINE (NUM_MACHINE);
CREATE INDEX INDMODIFICATION ON MODIFICATION (NUM_DETAIL);
CREATE UNIQUE INDEX UNINDMODIFICATION ON MODIFICATION (NUM_MODIFICATION);
CREATE UNIQUE INDEX UNINDWORKSHOP ON WORKSHOP (NUM_WORKSHOP);


/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE DEL_DETAIL (
    PNUM_DETAIL INTEGER)
AS
declare variable K integer;
begin

  select count(*) from Modification
  where NUM_DETAIL = :pnum_detail into :k;
  if (:k=0) then
  delete from Detail where NUM_DETAIL = :pnum_detail;
  else exception ex_detail_not_null;
end^


ALTER PROCEDURE DEL_MACHINE (
    PNUM_MACHINE INTEGER)
AS
declare variable K integer;
begin

  select count(*) from Detail
  where NUM_MACHINE = :pnum_machine into :k;
  if (:k=0) then
  delete from Machine where NUM_MACHINE = :pnum_machine;
  else exception ex_machine_not_null;
end^


ALTER PROCEDURE DEL_MODIFICATION (
    PNUM_MODIFICATION INTEGER)
AS
begin
  delete from Modification where NUM_MODIFICATION = :pnum_modification;
end^


ALTER PROCEDURE DEL_WORKSHOPS (
    PNUM_WORKSHOP INTEGER)
AS
declare variable K integer;
begin

  select count(*) from Machine
  where NUM_WORKSHOP = :pnum_workshop into :k;
  if (:k=0) then
  delete from workshop where NUM_WORKSHOP = :pnum_workshop;
  else exception ex_workshop_not_null;
end^


ALTER PROCEDURE INS_DETAILS (
    PNUM_MACHINE INTEGER,
    PNAMEDETAIL VARCHAR(20))
AS
declare variable k integer;
begin
  select count(*) from Detail
  where NAMEDETAIL =:pnamedetail
  into :k;
  if (:k=0) then
  insert into Detail (NUM_DETAIL, NUM_MACHINE, NAMEDETAIL)
  values (gen_id(gen_detail,1), :pnum_machine, :pnamedetail);
  else exception ex_detail_exist;
end^


ALTER PROCEDURE INS_MACHINE (
    PNUM_WORKSHOP INTEGER,
    PNAMEMACHINE VARCHAR(20),
    PTIMEOFMACHINE INTEGER)
AS
declare variable k integer;
begin
  select count(*) from Machine
  where NAMEMACHINE =:pnamemachine
  into :k;
  if (:k=0) then
  insert into Machine (NUM_MACHINE, NUM_WORKSHOP, NAMEMACHINE, TIMEOFMACHINE)
  values (gen_id(gen_machine,1), :pnum_workshop, :pnamemachine, :ptimeofmachine);
  else exception ex_machine_exist;
end^


ALTER PROCEDURE INS_MODIFICATIONS (
    PNUM_DETAIL INTEGER,
    PNAMEMODIFICATION VARCHAR(20),
    PWORKTIME INTEGER)
AS
declare variable k integer;
begin
  select count(*) from Modification
  where NAMEMODIFICATION =:pnamemodification
  into :k;
  if (:k=0) then
  insert into Modification (NUM_MODIFICATION, NUM_DETAIL, NAMEMODIFICATION, WORKTIME)
  values (gen_id(gen_workshop,1), :pnum_detail, :pnamemodification, :pworktime);
  else exception ex_workshop_exist;
end^


ALTER PROCEDURE INS_WORKSHOPS (
    PNAMEWORKSHOP VARCHAR(10),
    PCHIEFNAME VARCHAR(20))
AS
declare variable k integer;
begin
  select count(*) from Workshop
  where NAMEWORKSHOP =:pnameworkshop
  into :k;
  if (:k=0) then
  insert into Workshop (NUM_WORKSHOP, NAMEWORKSHOP, CHIEFNAME)
  values (gen_id(gen_workshop,1), :pnameworkshop, :pchiefname);
  else exception ex_workshop_exist;
end^


ALTER PROCEDURE SORT_BY_MACHINE_2 (
    TNUM_WORKSH INTEGER,
    TNUM_MACH INTEGER)
RETURNS (
    NAMEOFDETAIL VARCHAR(20),
    NUMBEROFMACHINE INTEGER,
    NUMBEROFWORKSHOP INTEGER)
AS
begin
  for select Det.namedetail, Mach.num_machine, Worksh.num_workshop
  from Machine Mach, Detail Det, Workshop Worksh
  where Det.num_machine = :tnum_mach
  and Mach.num_workshop = :tnum_worksh
  and Mach.num_workshop = Worksh.num_workshop
  and Det.num_machine = Mach.num_machine
  into :nameofdetail, :numberofmachine, :numberofworkshop do
  suspend;
end^


ALTER PROCEDURE SORT_BY_MAX_WORK_5 (
    TNUM_MOD INTEGER)
RETURNS (
    MAXTIME INTEGER,
    MACHINENUM INTEGER,
    MACHINENAME VARCHAR(40))
AS
begin
    for select max(Mach.timeofmachine)
    from Modification Mod, Detail Det, Machine Mach
    where Mod.num_detail = :tnum_mod
    and Mod.num_detail = Det.num_detail
    and Det.num_machine = Mach.num_machine
    into :maxtime do
    suspend;

    for select Mach.num_machine, Mach.namemachine
    from Modification Mod, Detail Det, Machine Mach
    where Mod.num_detail = :tnum_mod
    and Mod.num_detail = Det.num_detail
    and Det.num_machine = Mach.num_machine
    into :machinenum, :machinename do
    suspend;
end^


ALTER PROCEDURE SORT_BY_MIN_WORK_1 (
    TNUM_WORKSH INTEGER)
RETURNS (
    DETAILNAME VARCHAR(20),
    MODIFIFCATIONNAME VARCHAR(20),
    MINWORKTIME INTEGER)
AS
begin
    for select min(Mod.worktime)
    from Modification Mod, Detail Det, Machine Mach, Workshop Worksh
    where Worksh.num_workshop = :tnum_worksh
    and Mach.num_workshop = worksh.num_workshop
    and Det.num_machine = Mach.num_machine
    and Mod.num_detail = Det.num_detail
    into :minworktime do
    suspend;

    for select Det.namedetail, Mod.namemodification
    from Modification Mod, Detail Det, Machine Mach, Workshop Worksh
    where Worksh.num_workshop = :tnum_worksh
    and Mach.num_workshop = worksh.num_workshop
    and Det.num_machine = Mach.num_machine
    and Mod.num_detail = Det.num_detail
    into :detailname, :modififcationname do
    suspend;
end^


ALTER PROCEDURE SORT_BY_NULL_MODIF_4 (
    TWORKSHOP_NUM INTEGER)
RETURNS (
    DETAILNAME VARCHAR(40),
    DETAILNUM INTEGER,
    WORKSHOPNUM INTEGER)
AS
begin
    for select Det.namedetail, Det.num_detail, Worksh.num_workshop
    from Detail Det, Workshop Worksh, Machine Mach
    where :tworkshop_num = Worksh.num_workshop
    and Mach.num_workshop = Worksh.num_workshop
    and Mach.num_machine = det.num_machine
    and not exists(
        select * from modification
        where Det.num_detail = modification.num_detail
    )
    into :detailname, :detailnum, :workshopnum do
    suspend;
end^


ALTER PROCEDURE SORT_BY_RANDOM_NUM_3 (
    TNUM_WORKSH INTEGER,
    BOTTOM_LVL INTEGER,
    TOP_LVL INTEGER)
RETURNS (
    MODIFICATIONNAME VARCHAR(40),
    MODIFICATIONNUM INTEGER,
    WORKSHOPNUM INTEGER)
AS
begin
    for select Mod.namemodification, Mod.num_modification, Worksh.num_workshop
    from Modification Mod, Detail Det, Machine Mach, Workshop Worksh
    where Worksh.num_workshop = :tnum_worksh
    and Mach.num_workshop = worksh.num_workshop
    and Det.num_machine = Mach.num_machine
    and Mod.num_detail = Det.num_detail
    and Mod.num_modification < :top_lvl
    and Mod.num_modification > :bottom_lvl
    into :modificationname, :modificationnum, :workshopnum do
    suspend;
end^


ALTER PROCEDURE UPD_DETAILS (
    PNUM_DETAIL INTEGER,
    PNUM_MACHINE INTEGER,
    PNAMEDETAIL VARCHAR(20))
AS
declare variable K integer;
begin

  UPDATE Detail
  set NUM_MACHINE = :pnum_machine,
      NAMEDETAIL = :pnamedetail
  where NUM_DETAIL = :pnum_detail;

  select count(*) from Detail
  where NAMEDETAIL =:pnamedetail
  into :k;
  if (:k=2) then
  exception ex_detail_exist;
end^


ALTER PROCEDURE UPD_MACHINE (
    PNUM_MACHINE INTEGER,
    PNUM_WORKSHOP INTEGER,
    PNAMEMACHINE VARCHAR(20),
    PTIMEOFMACHINE INTEGER)
AS
declare variable K integer;
begin
  
  UPDATE Machine
  set NUM_WORKSHOP = :pnum_workshop,
      NAMEMACHINE = :pnamemachine,
      TIMEOFMACHINE = :ptimeofmachine
  where NUM_MACHINE = :pnum_machine;

  select count(*) from Machine
  where NAMEMACHINE =:pnamemachine
  into :k;
  if (:k=2) then
  exception ex_machine_exist;
end^


ALTER PROCEDURE UPD_MODIFICATIONS (
    PNUM_MODIFICATION INTEGER,
    PNUM_DETAIL INTEGER,
    PNAMEMODIFICATION VARCHAR(20),
    PWORKTIME INTEGER)
AS
declare variable K integer;
begin

  UPDATE Modification
  set NUM_DETAIL = :pnum_detail,
      NAMEMODIFICATION = :pnamemodification,
      WORKTIME = :pworktime
  where NUM_MODIFICATION = :pnum_modification;

  select count(*) from Modification
  where NAMEMODIFICATION =:pnamemodification
  into :k;
  if (:k=2) then
  exception ex_workshop_exist;
end^


ALTER PROCEDURE UPD_WORKSHOPS (
    PNUM_WORKSHOP INTEGER,
    PNAMEWORKSHOP VARCHAR(10),
    PCHIEFNAME VARCHAR(20))
AS
declare variable K integer;
begin

  UPDATE Workshop
  set NAMEWORKSHOP = :pnameworkshop,
      CHIEFNAME = :pchiefname
  where NUM_WORKSHOP = :pnum_workshop;

  select count(*) from Workshop
  where NAMEWORKSHOP =:pnameworkshop
  into :k;
  if (:k=2) then
  exception ex_workshop_exist;
end^



SET TERM ; ^

